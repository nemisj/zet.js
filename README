Zet.js is a lightweight experimental JavaScript class declarator. 
It's based on Module pattern and has some useful features of it, like private scoping and no 'new' usage. 
Yet, it has more than that. Zet.js provides you with unified declaration format, scope substitution protection, solid inheritance paradigm and support for namespaces.

# Class declaration examples

Declaring class with basic syntax :

    Zet.declare('SomeClass' , {
        superclass : 'someSuperClass',
        defineBody : function(that){
            Zet.public({
                construct : function(name, nickname){
                    Zet.log('SomeClass.construct');    
                    that.inherited(arguments);
                },

                someMethod : function(){
                    Zet.log('SomeClass.someMethod');
                    that._someFlag = true;
                }
            });
        }
    });

Class declaraion function do some stuff, bla bla bla


# Support for CommonJS Modules 1.0 API ( tested in nodejs )

Zet.js supports CommonJS Modules infrastructure and it can be included as normal CommonJS module, like: 

    var Zet = require('./zet');

Because CommonJS specifies that all functions and objects should be exported through exports variable, small changes are needed.
There are two possibilities. The most easy one is two set global scope declaration. This can be achived by executing profile function of the zet.js at the begin of the js file.

    Zet.profile({
        scope : exports
    });

By calling profile function, the root scope for all classes will be exports. Which means, that all classes will be visible for the includer in the form :

    var module    = require('./somemodule'):
    var someClass =  module.SomeClass(); // intantiate SomeClas;

One piitfall with this approach is the references of superclasss. In case superclass defined like reference to the constructor, the code will break. 
To help fixing this, Zet provides getClass facility. This means, classes can be retrieved from the scope by their names. Example:

Problem:

    Zet.declare('SomeClass' , {
        superclass : SomeSuperClass // <- points to the constructor in global scope, it should be inside the exports
    });

Solution : (because of the new profiled scope, Zet will return constructor from within exports scope);

    Zet.declare('SomeClass' , {
        superclass : Zet.getClass('SomeSuperClass')
    });


Another possibility is to use anonymous class declaration and point the constructor to the correct object. To do this, name of the class, should be ommited. For example:

Before : 

    Zet.declare('SomeClass' , {
        defineBody : function(that){
            Zet.public({
                construct : function(name, nickname){
                    Zet.log('SomeClass.construct');    
                }
            });
        }
    });

After : 

    exports.SomeClass =  Zet.declare( null , {
        defineBody : function(that){
            Zet.public({
                construct : function(name, nickname){
                    Zet.log('SomeClass.construct');    
                }
            });
        }
    });

Result for the includer will be the same as in the previous example: 

    var module    = require('./somemodule'):
    var someClass =  module.SomeClass(); // intantiate SomeClas;

Choosing one of the approaches will help to port/write code which will be possible to run on CommonJS compatible framework.




